/*Specify the number of columns, as well as width and height for each grid cell,and the script scales, crops and moves all selected elements into a grid.The grid dimensions default to the smallest width and height within the selection.*/#target illustratorif (app.documents.length>0) {	var doc = app.activeDocument;	var items = doc.selection;    	if (items.length<2) {		alert("Please select 2 or more items to arrange in a grid.");	} else {		// get the max cell size        var origin_x = items[0].left;        var origin_y = items[1].top;		var min_h = items[0].height, min_w = items[0].width;		var c = items.length;		while (--c>=0) {            if (items[c].left<origin_x) origin_x = items[c].left;            if (items[c].top<origin_y) origin_y = items[c].top;			if (items[c].height < min_h) min_h = items[c].height;			if (items[c].width < min_w) min_w = items[c].width;		}		min_w = Math.round(min_w);		min_h = Math.round(min_h);		var col_guess = Math.floor(Math.sqrt(items.length));		//alert('min_h: ' + min_h + ', min_w: ' + min_w);				// ask for the number of columns, a cell width and height		var input_received;		try {			var input = prompt("Please enter the number of columns, a cell width and a cell height (3,20,20).",col_guess+","+min_w+","+min_h);			var inputs = input.split(',');			var cols = parseInt(inputs[0]);			var cell_w = parseInt(inputs[1]);			var cell_h = parseInt(inputs[2]);			input_received = true;		} catch(e) {			alert("Please make sure inputs formats as follows: 'column_count,cell_width,cell_height'");			input_recieved = false;		}				if (input_received) {			for (var i=0,t=items.length; i<t; i++) {				var scale_ratio = Math.max(cell_w/items[i].width, cell_h/items[i].height);				items[i].width *= scale_ratio;				items[i].height *= scale_ratio;				var col = i % cols;				var row = Math.floor(i/cols);				items[i].left = origin_x + col * cell_w - (items[i].width-cell_w)/2;				items[i].top = origin_y - row * cell_h + (items[i].height-cell_h)/2;						        var new_group = items[i].parent.groupItems.add();				var new_clip = app.activeDocument.activeLayer.pathItems.rectangle(origin_y-row*cell_h,origin_x+col*cell_w,cell_w,cell_h,false);				items[i].moveToBeginning(new_group);		        new_clip.moveToBeginning(new_group);		        new_group.clipped=true;							}		}			}	} else {	alert("Please make a selection in a document before running this script.");}